version: "3.9"
services:
  backed:
    image: 211019955/stop-food-waste-backend:latest
    container_name: Backend
    restart: on-failure
    ports:
      - 8080:8080
    networks:
      - backend
    healthcheck:
      test: "curl -sS http://localhost:8080/health"
      interval: 1s
      timeout: 60s
      retries: 120

  recipe:
    image: 211019955/stop-food-waste-recipe:latest
    container_name: Recipe
    restart: on-failure
    ports:
      - "8080:9090"
    networks:
      - backend
    healthcheck:
      test: "curl -sS http://localhost:9090/health"
      interval: 1s
      timeout: 60s
      retries: 120

  model:
    image: 211019955/stop-food-waste-model-api:latest
    container_name: Model
    restart: on-failure
    ports:
      - "8080:7070"
    networks:
      - backend
    healthcheck:
      test: "curl -sS http://localhost:7070/health"
      interval: 1s
      timeout: 60s
      retries: 120

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: on-failure
    ports:
      - "80:80"
    networks:
      - frontend
      - backend
    healthcheck:
      test: "curl -sS http://localhost:80/health"
      interval: 1s
      timeout: 60s
      retries: 120

  influxdb:
    image: influxdb:latest
    container_name: influxdb
    restart: on-failure
    ports:
      - 8083:8083
      - 8086:8086
      - 8090:8090
    volumes:
      - influx_data:/var/lib/influxdb
    networks:
      - monitoring
      - glue

  telegraf:
    image: telegraf:latest
    container_name: telegraf
    restart: on-failure
    networks:
      - monitoring
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro

  kapacitor:
    image: kapacitor:latest
    container_name: kapacitor
    volumes:
      - ./kapacitor/kapacitor.conf:/etc/kapacitor/kapacitor.conf
    networks:
      - monitoring
    ports:
      - "9092:9092"

  chronograf:
    image: chronograf:latest
    container_name: chronograf
    volumes:
      - ./chronograf/:/var/lib/chronograf
    networks:
      - monitoring
    ports:
      - "8888:8888"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: on-failure
    ports:
      - "3030:3030"
    networks:
      - monitoring
    volumes:
      - grafana_data:/var/lib/grafana

  db:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - backend
    ports:
      - "5432:5432"
    volumes: 
      - db:/var/lib/postgresql/data


volumes:
  db:
    driver: local

networks:
  backend:
    external: false
  frontend:
    external: true
  monitoring:
    external: false
