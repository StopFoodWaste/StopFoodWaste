version: "3.9"

services:
  sfw-backed:
    image: 211019955/stop-food-waste-backend:latest
    container_name: sfw-backend
    restart: on-failure
    ports:
      - 8080:8080
    networks:
      - backend
    healthcheck:
      test: "curl -sS http://localhost:8080/health"
      interval: 1s
      timeout: 60s
      retries: 120

  sfw-recipe:
    image: 211019955/stop-food-waste-recipe:latest
    container_name: sfw-recipe
    restart: on-failure
    ports:
      - 9090:8080
    networks:
      - backend
    healthcheck:
      test: "curl -sS http://localhost:9090/health"
      interval: 1s
      timeout: 60s
      retries: 120

  sfw-model-api:
    image: 211019955/stop-food-waste-model-api:latest
    container_name: sfw-model-api
    restart: on-failure
    ports:
      - 7070:8080
    networks:
      - backend
    healthcheck:
      test: "curl -sS http://localhost:7070/health"
      interval: 1s
      timeout: 60s
      retries: 120

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: on-failure
    ports:
      - 80:80
    networks:
      - frontend
      - backend
    volumes:
      - ./nginx/sfw.conf:/etc/nginx/conf.d:ro
    healthcheck:
      test: "curl -sS http://localhost:80/health"
      interval: 1s
      timeout: 60s
      retries: 120

  influxdb:
    image: influxdb:latest
    container_name: influxdb
    restart: on-failure
    ports:
      - 8083:8083
      - 8086:8086
      - 8090:8090
    volumes:
      - influx_data:/var/lib/influxdb
      - ./influxdb/influxdb.conf:/etc/influxdb/influxdb.conf:ro
      - ./influxdb/init:/docker-entrypoint-initdb.d
    environment:
      - INFLUXDB_ADMIN_USER=${INFLUXDB_USERNAME}
      - INFLUXDB_ADMIN_PASSWORD=${INFLUXDB_PASSWORD}
    networks:
      - monitoring

  telegraf:
    image: telegraf:latest
    container_name: telegraf
    restart: on-failure
    networks:
      - monitoring
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro

  kapacitor:
    image: kapacitor:latest
    container_name: kapacitor
    restart: on-failure
    volumes:
      - ./kapacitor/kapacitor.conf:/etc/kapacitor/kapacitor.conf:ro
    networks:
      - monitoring
    ports:
      - 9092:9092

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: on-failure
    ports:
      - 3030:3030
    networks:
      - monitoring
    volumes:
      - ./grafana/provisioning/datasources/all.yml:/etc/grafana/provisioning/datasources:ro
      - ./grafana/provisioning/dashboards/all.yml:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana

  vault-server:
    image: vault:latest
    container_name: vault
    restart: on-failure
    ports:
      - 8200:8200
    environment:
      VAULT_ADDR: "http://0.0.0.0:8200"
      VAULT_DEV_ROOT_TOKEN_ID: "vault-plaintext-root-token"
    cap_add:
      - IPC_LOCK
    networks:
      - backend
    volumes:
      - vault_data:/vault/file

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./portainer-data:/data
    ports:
      - 9000:9000

networks:
  backend:
    external: false
  frontend:
    external: false
  monitoring:
    external: false

volumes:
  influx_data:
  grafana_data:
  vault_data:
  portainer-data:

